# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  schedule:
    - cron: '29 0 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:

  checks:
    runs-on: ubuntu-latest
    # The API requires write permission on the repository to submit coverage reports
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "^1.22"
    - run: go version

    - id: govulncheck
      uses: golang/govulncheck-action@v1

    - name: Lint
      run: gofmt -l -e ./

    - name: Test
      run: go test -v ./...

    - name: Coverage
      uses: lazyguru/go-coverage-action@9b496d245c69f85ab8cef4ce57d857cc727506ee
      with:
        # Fail the build if the coverage drops below supplied percentage
        coverage-threshold: 0 # Change this as coverage improves
        # Fail the build if coverage drops below coverage-threshold.  One of "always", "never" or "only_pull_requests"
        fail-coverage: only_pull_requests
        # Adds a comment to the PR with coverage information if true. If false will only add an action summary report
        add-comment: false
        # One or more regular expressions matching filenames to exclude from coverage statistics (e.g. for generated Go files)
        #ignore-pattern:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.1'

    - name: Build
      run: go build -v cmd/federation.go

    # Set up BuildKit Docker container builder to be able to build
    # multi-platform images and export cache
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6.3.0
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
